# This is terraform main.tf configuration file that create ec2 instance & uses IAM role to run userdata to install cloudwatch agent

resource "aws_instance" "linux_instance" {

#  for_each = { for idx, inst_type in var.instance_type : idx => inst_type }
  for_each = var.instance_configurations
#  ami           = "ami-08a52ddb321b32a8c"                 ##  Amazon Linux AMI ID - Defining ami id
#  ami           = data.aws_ami.latest_amazon_linux.id     ## Dynamic ami from ami.tf file for one instance
  ami           = data.aws_ami.latest_amazon_linux[each.key].id ## Dynamic ami from ami.tf file for multi instance
#  instance_type = "${var.instance_type}"               ## Instance type "t2.micro" for single instance
#  instance_type = each.value                           ## for multi ec2 instace type, using list function to declare variable
  instance_type = each.value.instance_type
#  key_name      = "${var.ami_key_pair_name}"               ## Key pair name "cwagent" existing value
  key_name      = "${var.key_pair_name}"                    ## dynamic/autogenerated keypair
  subnet_id     = each.value.subnet_id
  vpc_security_group_ids = [aws_security_group.instance_sg.id]
  associate_public_ip_address = true  # Assign the Elastic IP to the instance
  root_block_device {
#    volume_size = "${var.ebs_volume_size}"   #{##{ Note:- if we do not use "root_block_device" then aws will automatically assign default 8GB ebs volume to newly provisioned ec2 instance}} 
    volume_size = each.value.ebs_volume_size
  }

#  Attaching instance profile role on ec2 instance from iam-role.tf file
  iam_instance_profile = aws_iam_instance_profile.ec2_profile.name

# Adding Userdata script to install, configure & start CloudWatch Agent
  user_data = file("EC2Module/cwagentuserdata.sh")

  tags = {
#     Name = "${var.instance_name}"           ## For single instance
    Name = "EC-${each.value.name}-0${var.index}"
   }

# Enable EC2 termination protection
  disable_api_termination = var.disable_api_termination      
}


## Assign Elastic IP to each instance
resource "aws_eip" "elastic_ip" {
  for_each = aws_instance.linux_instance
  instance = aws_instance.linux_instance[each.key].id
  tags = {
    Name   = "EIP-${each.key}"
    Owner  = "Terraform.Abhishek"
  }
  depends_on = [aws_instance.linux_instance]
}


####################################################################################
# Adding Userdata script to install & start CloudWatch Agent
#   user_data = <<-EOF
#             #!/bin/bash
#             # Install the CloudWatch Agent
#             sudo wget https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
#             #sudo wget https://s3.amazonaws.com/amazoncloudwatch-agent/linux/amd64/latest/AmazonCloudWatchAgent.zip
#             #unzip AmazonCloudWatchAgent.zip
#             sudo rpm -U ./amazon-cloudwatch-agent.rpm
#             #sudo ./install.sh

#             # Download JSON configuration file from S3 bucket
#             sudo aws s3 cp s3://cwagents3toec2/config.json /opt/aws/amazon-cloudwatch-agent/bin/config.json

#             # Restart the CloudWatch Agent
#             sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/bin/config.json -s
#             # Enable the agent to start on system boot
#             sudo systemctl enable amazon-cloudwatch-agent
#             EOF
#}


# # Creating new ebs volume
# resource "aws_ebs_volume" "example_volume" {
#   availability_zone = "us-east-1b"       # Adjust the AZ as needed
#   size             = 13                  # Adjust the size as needed (in GiB)
# }

# # Attaching new ebs volume to ec2 instance
# resource "aws_volume_attachment" "example_attachment" {
#   device_name = "/dev/sda1"                       #/dev/sdf     # Adjust the device name as needed  ## new volume is getting created instead of adding in default existing volume xvda
#   instance_id = aws_instance.linux_instance.id                  # calling ec2 instance resource
#   volume_id   = aws_ebs_volume.example_volume.id
# }
# NOTE:- Getting error while attaching ebs volume to ec2 instance

# ### Below is for Windows instances

# resource "aws_instance" "windows_instances" {
#   count = 2  # Number of Windows instances

#   ami           = "ami-xxxxxxxxxxxxxxxxx"  # Windows AMI ID
#   instance_type = "t2.micro"               # Instance type
#   key_name      = "your-key-pair"          # Key pair name

#   user_data = <<-EOT
#     <powershell>
#     # Download CloudWatch agent configuration JSON from S3
#     aws s3 cp s3://your-bucket-name/path-to-your/config.json C:\Temp\config.json

#     # Install and configure CloudWatch agent
#     Invoke-WebRequest -Uri https://s3.amazonaws.com/amazoncloudwatch-agent/windows/amd64/latest/amazon-cloudwatch-agent.msi -OutFile C:\amazon-cloudwatch-agent.msi
#     Start-Process -Wait -FilePath msiexec.exe -ArgumentList "/i", "C:\amazon-cloudwatch-agent.msi"
#     & "C:\Program Files\Amazon\AmazonCloudWatchAgent\amazon-cloudwatch-agent-ctl.ps1" -a append-config -s -c file:C:\Temp\config.json
#     </powershell>
#   EOT

# }
# Copies the ssh key file to home dir
# provisioner "file" {
# source      = "./${var.key_name}.pem"
# destination = "/home/ec2-user/${var.key_name}.pem"
# connection {
# type        = "ssh"
# user        = "ec2-user"
# private_key = file("${var.key_name}.pem")
# host        = self.public_ip
# }
# }
# //chmod key 400 on EC2 instance
# provisioner "remote-exec" {
# inline = ["chmod 400 ~/${var.key_name}.pem"]
# connection {
# type        = "ssh"
# user        = "ec2-user"
# private_key = file("${var.key_name}.pem")
# host        = self.public_ip
# }
# }