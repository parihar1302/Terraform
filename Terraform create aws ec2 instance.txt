Terraform launches EC2 instance              https://kumargaurav1247.medium.com/introduction-to-terraform-ec2-instance-creation-using-terraform-ec221ec630d7
===================================          https://www.middlewareinventory.com/blog/terraform-aws-example-ec2/
                                             https://jhooq.com/terraform-input-variables/      :- Terraform variable

Step-1.) Create an IAM user :-


Step-2.) Launch ec2 instance & Install aws cli :-
apt install python3 -y
apt install pip -y
pip install awscli
   OR
sudo apt-get install AWS cli

aws --version       ##{verifing the aws-cli version}


## Configure AWS CLI :-
aws configure
Access key:- <IAM user access key>
Secret access key:- <IAM user secret access key>
Region:- us-east-2            ##{can modify as per your requirement}


Step-3.) Downloads terraform from official website :-    https://www.terraform.io/downloads        
curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
sudo apt-get update && sudo apt-get install terraform
terraform -v
     OR	
curl -O https://releases.hashicorp.com/terraform/0.12.16/terraform_0.12.16_linux_amd64.zip
unzip terraform_0.12.16_linux_amd64.zip -d /usr/bin/               ##{Unzip the binary to /usr/bin}


## NOTE:-Optional step --> to set the path, so that terraform can work in any location (no location specific). If it's installed in download folder than move to any binary location, below steps mention:-
echo $PATH
mv ~/Downloads/terraform /usr/local/bin/
terraform -help

## Enable tab completion:-
touch ~/.bashrc
terraform -install-autocomplete



Step-4.) Create providers.tf     ## ## This file contains provider info. Here, provide is aws. Otherwise it could be :- aws, azure, gcp
vi providers.tf             
provider "aws" {
  region = "us-east-2"
}

##Note:- you can even mention providers.tf content in main.tf as well including access & secreate access key

Step-5.) Create main.tf also called as Configuration file.     ## A file which consists of a template to provision the resources in the cloud.
vi  main.tf
resource "aws_instance" "terraforminstance" {
  ami  = "ami-0fb653ca2d3203ac1"
  instance_type = "t2.micro"
  tags = {
    Name = "terraformserver"
  }
}

## NOTE:- Now we will go to terminal, go to that path where you created main.tf and run the terraform init command


Step-6.) terraform init         ##{it scans the provider & download the dependancy or code for provider. In this senerio, we have taken aws as provider. It's idempotent}
ls -larth               ##{provider code would be downloaded into .terraform folder}


Step-7.) terraform plan          ##{It runs a sanity check. Shows you what exactly terraform going to make changes}
+ = add,   - = remove, ~ = modified
           OR
	 terraform plan -out tfplan        ##{-out tfplan will save the output. and you can discuss within your team & take the GO-NO-GO call}


Step-8.) terraform apply         ##{Create/Provision the changes}
            OR
         terraform apply --auto-approve        ##{provitioning without asking "yes"}
            OR
	 terraform apply "tfplan"             ##{using tfplan, To perform exactly same actions as terraform plan -out tfplan}
	 

Step-9.) now you can verify from EC2 console, wheather instance is created or not


Step-10.) terraform output         ##{display the output}


Step-10.) terraform destroy           ##{delete your all resources, which you had created}  
            OR
          terraform destroy --auto-approve          ##{Deleting without asking "yes"}

===================================================================================================================================


### How to SSH into the EC2 instance :-        https://jhooq.com/terraform-ssh-into-aws-ec2/
----------------------------------------

Step:-11) Creating a folder to store the keys:-
cd /home/ubuntu
mkdir keys
cd keys
mkdir aws


Step-12.) Generating SSH key for loging into the new ec2 instance:- 
ssh-keygen -t rsa -b 2048 
Enter file in which to save the key (/home/rahul/.ssh/id_rsa): /home/ubuntu/keys/aws/aws_key



Step-13.) Verify keys & copy public key's content:-
cd /home/ubuntu/keys/aws/
ls                           ##{aws_key as private && aws_key.pub as public keys}
cat aws_key.pub                   ##{copy the content}



Step-14.) Now modify the main.tf. Below scipt contains ec2, security growup & key provision. You need to add publickey content below
vi main.tf
resource "aws_instance" "terraformec2" {

    ami = "ami-0fb653ca2d3203ac1"  
    instance_type = "t2.micro" 
    key_name= "aws_key"
    count = 3                                                 ## No. of ec2 instance to be provisioned. based on your requirement, you can modify
    vpc_security_group_ids = [aws_security_group.main.id]
    tags = {
    	Name = "terraform"
    }


#  provisioner "remote-exec" {
#    inline = [
#      "touch summary.txt",
#      "echo Hi, Abhishek Singh Parihar.This is a Teraform script to launch a ec2 & logged into it >> summary.txt",
#    ]
#  }
  connection {
      type        = "ssh"
      host        = self.public_ipb
      user        = "ubuntu"
      private_key = file("/home/ubuntu/keys/aws/aws_key")
      timeout     = "4m"
   }
}

resource "aws_security_group" "main" {
  egress = [
    {
      cidr_blocks      = [ "0.0.0.0/0", ]
      description      = ""
      from_port        = 0
      ipv6_cidr_blocks = []
      prefix_list_ids  = []
      protocol         = "-1"
      security_groups  = []
      self             = false
      to_port          = 0
    }
  ]
 ingress                = [
   {
     cidr_blocks      = [ "0.0.0.0/0", ]
     description      = ""
     from_port        = 22
     ipv6_cidr_blocks = []
     prefix_list_ids  = []
     protocol         = "tcp"
     security_groups  = []
     self             = false
     to_port          = 22
  }
  ]
}


resource "aws_key_pair" "deployer" {
  key_name   = "aws_key"
  public_key = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDHaQLX43QPmo8Zil415aIgpbmGDj84cghccdA7TRBQstndv+x2qkTPCBz5sKGmgv49dHibywctkC+sfQ4MuBY1Kk79ydg8c8eWEqw1q4s4QQl6+YkK9h4UniTqTasCQJcoPonFrUHQ1VHfyb8MCsttRysL4w9i3YvwUgQpM1Z+31IWFxpHTyj4+dDx6zzlURkG1xZkibg3kYXu/r9uwH/hhHdT3VD7rM2lkKJf93RQqKKx4K/s7ocLVLrhyyS85wH6mZn4jk8HctoGtObD9w0W0U96/Vzm4uKwf2PyaYZ28ipJOb9cj2ITZ+BELoYjdvXJ16RYm+8lW1JBmbJyFU8/ root@ip-172-31-39-201"                  //replacing public key content here
}


* Save & Exit

terraform init

terraform plan

terraform apply

## Verify Ec2 On consle 

## Now copy the SSH command from connect go to the terminal

cd /home/ubuntu/keys/aws/

##paste the command in terminal & Remove .pem from it. to login into provisioned instance



Step-15.) Now Need to provide .Pem extention & download the key pair :-
---------------------------------------------------------------

Go to EC2 dashboard >> Key pairs 

Create key pair >> Name :- aws_key
                   Private key file formate :- .Pem

Create key pairs                  ##{key will download on local system}

Now you can connect the instance with Pem file.

================================================================================================================================================

### Terraform Variable:- https://jhooq.com/terraform-input-variables/ 


## Added S3 Bucket resource in main.tf
---------------------------------------

vi main
variable "s3_bucket_names" {
  type = list
  default = ["dev-bucket.app", "uat-bucket.app", "prod-bucket.app"]
}

resource "aws_s3_bucket" "rugged_buckets" {
  count         = length(var.s3_bucket_names) //count will be 3
  bucket        = var.s3_bucket_names[count.index]
  acl           = "private"
  region        = "us-east-2"
  force_destroy = true
}



## Adding Variable file
------------------------

vi variables.tf
variable "s3_bucket_names" {
  type = list
  default = ["bucket1.app", 
             "bucket2.app", 
             "bucket3.app" 
            ]
}
