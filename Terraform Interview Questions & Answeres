## Terraform Interview Question & Answeres
==============================================

Q.) Terraform :- It's a infrastructure tool where you can create a template & based on that, infrastrucure gets created.
                 It is compatible with AWS, Azure, GCP & VMware.
 
 
 Q.) What is Terraform current version ?
 A.) v1.7.3 (latest version) as per 11/02/2024
 
Q.) Can Ansible create infrastucure?
A.) Ansible is a configuration management tool but it can also create whole infrasturcure with complex playbook which is difficult to manage.

Q.) Cloudformation VS Terraform ?
A.) Cloudformation is also an Infrastecure as code(IAAS) but drawback is , it's compatible only in AWS. This can not deal with anyother cloud plteform. Where Terraform has an ability to work in any cloudplatform.
    Also, you can not create a keypair & have to mention hard-coded in cloudformation where Terraform can create that during run-rime or dynamically.

Q.) Whatv is Terraform init ?
A.) It initializes the provider & based on that, download the code/depandency & store inside .terraform folder.

Q.) What is Terraform plan ?
A.) It runs as sanity check or dry run before provisioning the resources or executing the main.tf configuration file. 
    Once it runs successfully you can get the confirmation from other teams & run further commands like terraform apply. You can debug the code here only, if there is any issue before deploying 
    Validate the configuration file implicitly during the terraform plan.
    
     
Q.) What is Terraform apply ?
A.) It runs the main.tf configuration file & provision the resources, module which is mentioned in it.

Q.) What is Terraform refresh or Terraform apply -refresh-only and Terraform plan -refresh-only?    {#https://learning-ocean.com/tutorials/terraform/terraform-refresh
A.) You can bring current cloud provisioned sate in Terraform state file. 
EX:- suppose you run Terraform apply which will provision theresource on cloud as well as create Terraform state file
     but if other developer manually update the provisioned resouces than next time when we will run the Terraform apply, it ill throw an error
     to avoide above error we run Terraform refresh so state file gets the updated resources which is already provisioed.
     after Terrafrom refresh perform Terraform plan & consult with team than Terraform apply this will provision previous mentioned resourc not the modified one.
[Note:-If you remove any resourc from main.tf & doesn't update tfstate file than based on main.tf resourcs will get provisioned after executing Terraform apply.


Q.) What is Terraform destroy ?
A.) It terminates the resources which are created by main.tf configuration file.

Q.) Difference b/w Terrafrom Validate & Terraform Plan ?            {# https://spacelift.io/blog/terraform-validate}
A.) Both the command used for validation perpose where 
    Terraform Plan is used to validate configuration file  shows what exactly is modified, replaced, created & destroy.Also, Plan command hit various API to remote state file & cloud platform api & gets the latest info on state & real world cloud.
    Terraform Validate command is used to validate configuration file locally or host machine. It validates the syntex from configuration file. Doesn't depend on state file.  It is recommended to use this command to validate the consistencies between reusable modules in a given Terraform configuration directory.
   

Q.) What is Terraform Local ?
A.)

Q.) What is Terraform null resource ?
A.) 

Q.) what is Terraform Resource ?
A.) Resource is like a service which you can use for provisioning.
    Ex:- aws_instance, s3, rds, vpc

Q.) Whatis Terraform Module
A.) Collection of multiple configuration files in a directory to avoide the complexity of main.tf.

Q.) What is Terraform Provider & Custome Provider ?
A.) 

Q.) What is Terragrunt ?
A.) 

Q.) What is Terraform Import ?
A.) 

Q.) Can i run specific module on specific resource or ec2/host/server, instead off running all module in all server?
A.) yes, you can run perticular module on specific resource or host/server/ec2.    ---> https://jhooq.com/terraform-run-specific-resource/

Senerio-a.)
1.) Single module on sigle host using -target=resource :-                  
terraform apply -target=module.module-1.aws_instance.my_ec2_instance                   ## module :- it's a prifix/parameter, if you're using any module
                                                                                       ## module-1 :- it is name of the module which you're using.
2.) Running speciific resource or ec2/server/ host without module:-                    ## aws_instance :- This is the instance type(resource) that I am targetting to run or apply
terraform apply -target=aws_instance.my_ec2_instance                                   ## my_ec2_instance:- It is the name of my host/server/instance on which I am targetting to run or apply

Senerio-b.)
1.) specifing Multiple modules on specific Multiple resources or ec2/server/host
terraform apply -target=module.module-1.aws_instance.my_ec2_instance_1 -target=module.module-2.aws_instance.my_ec2_instance_2 


Q.) What is the use of  .tfstate & .tfstate.backup file
A.)i.).tfstate:- Terraform stores information about your infrastructure in a state file. 
                              This state file keeps track of resources created by your configuration and maps them to real-world resources.

ii.) .tfstate.backup :- By default, a backup of your state file is written to terraform. tfstate. backup in case the state file is lost or corrupted to simplify recovery. 
                        The state file is used by Terraform to keep track of resources and metadata information about your infrastructure
 
 
 Q.) What if you lose/delete/modify/move Terraform state file ?
 A.) Terraform will assume it hasn't created any state at all. Terraform will think it never created those resources in the first place and will try to duplicate everything.
 
 
 Q.) Where do you store Terraform state file ?
 A.) Remote backends allow you to store the state file in a remote, shared store. 
     A number of remote backends are supported, including Amazon S3, Azure Storage, Google Cloud Storage, and HashiCorp's Terraform Cloud and Terraform Enterprise.
     S3 bucket  (best practice) or Locally.
 
Q.) What does Terraform show do?
A.) You can read/display the state file (.tfstate) in terminal itself.

Q.) Can you edit .tfstate file ?
A.) You can edit the terraform state manually but it is highly discouraged.

Q.) What is Terraform Output file & why do we use it ? 
A.) Terraform output stores output values & also useful while debugging your terraform code. 
    Terraform output values can help you to print the attributes reference(arn, instance_state, outpost_arn, public_ip, public_dns etc) on your console.
    syntex:- output "my_console_output" {
               value = aws_instance.my_ec2_instance.public_ip       ##{aws_instance=resource, my_ec2_instance=server name, public_ip=attribute}
             }
##Note:- you can mention output paramter in "main.tf" or create a seperate file "output.tf" (recommanded).


Q.) How to fix identation error?
A.) command:-   terraform fmt       ##{this will set the correct indentation in files.}


Q.) How to encrypt/hide sensitive output details in Terraform ?
A.) Sensitive :- To encrypt/hide sensitive output details which you don't want to expose to everyone.
syntex:-  sensitive = true


Q.) What is depends_on in Terraform ?
A.) Condition where one resource execute after other mentioned resource.

Q.) What is Terraform workspace ?
A.) It means where you can have multiple state of your main.tf configuration files. Ex:- if ou are having dev configuration file , the same file can be used for production as well.

Q.) What is Terraform Provisioners ?
A.) Basically, it is used to execute the script in local or remote machine as well as copy the file in local or remote server.
    It is similar to “EC2 instance user data” scripts that only run once on the creation and if it fails terraform marks it tainted.
    
Q._ What are the two types of backends Terraform?
A.) Based on this, Terraform backends are classified into two types.
    1.) Enhanced Backend – Additional operations like plan, apply, etc. on remote.
    2.) Standard backend – Simple State file storage and lock facility.







